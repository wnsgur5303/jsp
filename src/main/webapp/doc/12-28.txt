등록된 메핑을 참조..

private static final Logger logger = LoggerFactory.getLogger(BasicServlet.class);

logger 사용

System.out.println 앞으로 사용금지. 

이유:

logging 사용 이유: 개발시 의도한대로 동작하고 있는지 검사

ex:)웹브라이저를 통해 server로 요청(localhost/basicServlet)
		doGet 메소드가 호출이 되었는지 로그를 통해 확인

파라미터가 의도한대로 서블릿으로 전달이 되었는지 확인

logging과 비슷한 목적으로 사용하는것: 디버깅

개발 할때는 상세한 로깅이 필요
 
싱크로 나이즈드. 대기시키는거.(이거쓰면 사용자 몰리면 서버가 다운이 될 수 있음.)

필요할때만 로그보기
개발시작성한로그 삭제 필요
삭제후 다시 필요하면? 다시작성, 완료 되면 다시 삭제.

SLF4J
심플 로깅 Facade for java


<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
<dependency>
    <groupId>ch.qos.logback</groupId>
    <artifactId>logback-classic</artifactId>
    <version>1.2.3</version>
    <scope>test</scope>
</dependency>

pom에 붙여넣기

선언부랑 구현부가 나눠져 있다는게 핵심?
----
 //선언부 : 로거객체 얻기
            Logger logger = LoggerFactory.getLogger(LogbackTest.class);
            
            //사용법
            logger.error("error 출력");
            logger.warn("warn 출력");        
            logger.info("info 출력");
            logger.debug("debug 출력");
            logger.trace("trace 출력");    
----
??


메이븐 리퍼지토리  항목에 있는 다른명칭들은 메이븐과 비슷한 역활을 하는것들임

메이븐으로 빌드할때를 보면
라이프 사이클이 

클린 디폴트(실질적인 배포의 핵심이되는거라 중시) >이거 실제 쓰는거 드믈다? 사이트
디폴트-컴파일 테스트 패키지 


스코프-
스코프란 해당 라이브러리가 언제 필요한지 지정을 해주는것
compile test/까지에서 필요하고 
웹-	inf
|	
lib	

dep로 콘솔에 검색...

디펜던시창.?
3개가 배포된걸 확인가능

	<!-- scope 
		생략시(default) compile - 컴파일 과정부터 배포되는 과정까지 해당 라이브러리가 필요함을의미
		test : test과정 까지만 필요, 배포시(apckaging)시 제외 됨
		//제공되었다.
		provided(제공이 되어짐): 운영환경에서 해당 라이브러리가 제공이됨(배포 할때 빠짐)
	-->


D:\A_TeachingMaterial\6.JspSpring\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\jsp\WEB-INF\lib
위 주소에 프로바이드 주석처리하면 생겨남


<scope>test</scope> 제거해야함.
배포위해서?


D:\A_TeachingMaterial\6.JspSpring\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\jsp\WEB-INF
/---2교시-------------/

http://logback.qos.ch/

http://logback.qos.ch/documentation.html
http://logback.qos.ch/manual/index.html
Chapter 3: Configuration

Example: Basic configuration file (logback-examples/src/main/resources/chapters/configuration/sample0.xml)

<configuration>

  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <!-- encoders are assigned the type
         ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
    <encoder>
      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
    </encoder>
  </appender>

  <root level="debug">
    <appender-ref ref="STDOUT" />
  </root>
</configuration>

자바파일이 아니라 리솔시스 폴더에 넣어야함
최상위폴더에 넣어줘야함

logback.xml파일 생성

그 후에 Logger 자바에서 쓰면 이제 오류안남

두겟 안에서
logger.debug("basicServlet.doGet()");
					k<패키지 경로이름 길어지면 툴에서 경로명을 줄임
10:11:49.038 [http-nio-80-exec-2] DEBUG k.or.ddit.servlet.basic.BasicServlet - basicServlet.doGet()
시간		쓰레드이름		로그가 출력된 경로			메시지
이라고 메시지가 나옴


로깅하려면 로거가 필요하다.
logback

보통 로그기록은 파일로 남기는거 선호


  <root level="debug">
    <appender-ref ref="STDOUT" />
  </root>
보통 주석처리하는 부분



		<logger name="kr.or.ddit" level="debug">   <이거 error로 바꾸면..
			<appender-ref ref="STDOUT"/>
		</logger>
직접작성한것.

 5가지의 로깅 레벨.

코드에서 ...레벨에 맞게.
레벨 에러로 바꾸면
로거.에러    로만 메시지 출력됨
ex catch 
error 레벨은 에러가 발생했을때. 원인을 찾기위해 사용

레벨이 나뉜이유 필요할때만 로그를 보고자 해서.
오류볼때 sysout 말고 로그만 사용할것. 서버 다운위험있음.

teace
디버그보다 상세한 정보를 출력 할 때

debug
프로그램을 디버깅 하기 위한 정보를 출력 할 떄

info
상태변경과 같은 정보성 메세지 출력시

warn
향후 시스템에 문제가 발생할 가능성이 있는 메세지 추력

error
에러가 발생 했을 때 (ex catch )




<appender name="FILE" class="ch.qos.logback.core.FileAppender">
	<file>d:\log\test.log</file>
	<encoder>
		<pattern>%date %level [%thread] %logger{10} [%file:%line] %msg%n</pattern>
	</encoder>
</appender>

파일로 남기기


		<logger name="kr.or.ddit" level="error">
			<appender-ref ref="FILE"/>
		</logger>로 변경



사용시 주의점

logger.debug("basicServlet.doGet() userid paramter : " + req.getParameter("userid"));

문자열 결합이 생각보다 큰 퍼포먼스를 요구하여 느려짐

if(설정로그레벨 >= bebug) {
logger.debug("basicServlet.doGet() userid paramter : " + req.getParameter("userid"));
}

이렇게 피해가기도 했었다.
2줄이나 추가로 들어가고 깔끔하지 못해서

다음세대 라이브러리에서는

logger.debug("basicServlet.doGet() userid paramter :{}{}",req.getParameter("userid"), req.getParameter("password"));
		
식으로 바꿨다. 현재 우리가 쓸 방식



///////////////3교시...............
1. 중간 프로젝트를 maven 프로젝트로 전환
2. sysout ==> logback으로 변경


변경과정으로 pt 작성(중요한 작업내역을 캡쳐, 코드를 텍스트로 붙여 넣기)
12/31일 까지



한거 정리
syso 사용금지
그리고 이유

로깅 사용 이유 개발시 의도한 동작하고 있는지 검사

ex웹 브라우저


log level 설정에 따른 로거 메소드 동작 여부

로깅 문자열 결합을 피하기 위한 방법
문자열 결합은 왜 피해야 하는가

---
servlet : 자바에 html 코드를 삽입
생기는 문제점: 
1.html 코드들이 문자취급 되기 때문에 오타를 발견하기 어려움
2.합업의 문제점
java-프로그래머
html-디자이너
3.개발자가 코드를 리딩하는데 가독성의 문제
-jsp의 탄생 배경


jsp:html 코드에 자바 코드를 삽입


서블릿을 통해서 구구단
times tables 출력

url:http://localhost/TimesTablesServlet


서버 뷰 더블클릭하면
실행하는게 contextPath 기본설정 하는것도 프로젝트의 프로젝트 셋팅에서 바꿨었음.
개발하다가 404뜨면 서버 더블클릭해서 모듈확인설정..

404뜨면 서버는 실행이 된것.

화면을 다루는것과 로직부분을 합쳤을때 보기 나쁘다는걸 알아보기위해 했음

서블릿 복습-
http 서블릿 상속받기(extends)

url로 주소창에 입력해서 가는건 doget방식


--4교시
jsp란

자바 서버 페이지

요청에 따라 동적으로 컨텐츠(html, json,xml등)을 생성/전달(목적은 동일한 목적을 갖는다.)
jsp는 화면 구성에 사용(html 안에 자바코드를 사용한다.)

서블릿은 jsp와 거의 유사하다(jsp는 ,서블릿으로 변환됨)

서블릿은 로직 처리시에 사용 ->MVC framework(spring,struts등) 사용

jsp파일을 webapp폴더에 만듬

톰캣 폴더에 워크라는 폴더가 jsp를 서블릿으로 변환할때 사용하는 공간.
근데 다른대서씀
나는 
D:\A_TeachingMaterial\6.JspSpring\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\ROOT\org\apache\jsp
에서 배포중











--다음날

최초요청이 있을때 파일생성.
한번 서블릿으로 만들었으면 나갔다 들어와도 새로 만들지 않는다. 로딩 짧아짐.



저번꺼 이어서 jsp~ html java~~`

1. jsp는 servlet 으로 변환되어 서비스 된다
2.servlet<-container(tomcat)이 jsp를 서블릿으로 변환하는 과정에서
	사용되는 폴더는 work 폴더
	-tomcat 도 개발자가 만든 프로그램으로 비정상적으로 동작할 때가 있음
	-개발자가 jsp 파일을 수정하였음에도 수정 내역이 반영되지 않을 경우
	work폴더에 생성된 jsp 변환 파일을 (java,class)를 삭제해주면 새롭게 만들어 준다.
3.jsp를 서블릿으로 변환하는 시기는 해당 jsp에 대해 최초 요청이 일어 났을 경우에 변환
	-서블릿으로 생성이 된 이후 같은 파일에 대한 요청은 이미 변환된 파일로 서비스


지시자*  이거 없는상태로 개발하는것은 불가능
스플릿플릿 java 코드 기술 -< JSTL   나중가면 안씀
표현식: 출력-->  EL
주석
선언부 : 변수,메소드 선언->View와는 크게 관련이 없는 부분

---------------------------------------------
