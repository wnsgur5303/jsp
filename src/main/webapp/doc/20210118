2021-01-18


EL과  JSTL 을 배우는 이유
==>표현식, 스크립틀릿을 걷어 내기 위함.
==>JSP파일을 최대한 태그처럼 보이게 하기 위함
(자바 코드를 걷어낸다.)



jstl 태그라이브러리 사용방법 지시자<%@ %>

CORE tag 라이브러리
속성지향
request.setAttribute("속성명", 속성값);
session.setAttribute("속성명", 속성값);



jstl 태그라이브러리 사용방법 지시자<%@ %>

1.tablib 지시자 선언
<@ taglib prefix = "네임스페이스, 개발자가 편한대로 지정가능, 관습적으로 많이 사용하는 prefix를 보통 따름" 
	url ="사용하려고하는 태그의 식별자"%>
컨트롤 스페이스만 눌러보면 어느정도 기억 안해도 쓸수있



CORE tag 라이브러리
속성지향
request.setAttribute("속성명", 속성값);
session.setAttribute("속성명", 속성값);




지시자
include - 해당 클래스를 자동으로 임폴트해서 알게모르게 써봤음


${pageContext.}
${param.}
${속성명}


${request...} 제공 안해줌

JSTL CORE 조건 제어(java if)
if => java 단일 if
chose ==> java if, else if, else

JSTL 반복문 (for,향상된 for) ***많이씀
forEach


JSTL core URI
import : 특정 url 에서 변화하는 값(html) 을 호출하는 곳에 추가하는 기능
redirect : 클라이언트에게 다른 url 로 재전송 요청
url : url 경로 작성

JSTL core 기타
catch
out

FILTER
요청을 처리할 servlet, jsp로 요청이 전달되기전에 사전에 먼저 요청을 받아
공통적인 작업을 처리할 수 있는 객체

1. 필터는 여러개 등록할 수 있다.
	요청 - 필터1 - 필터2 - 최종적으로 해당 요청을 처리할 servlet, jsp로 요청이 전달
	servlet, jsp에 의해 응답이 생성되면 거쳐온 필터의 역순으로 응답이 전달된다.
	servlet, jsp ==> 필터2 - 필터1 -- 최종 응답 전달

2. 필터 생성방법
	.Filter 인터페이스 구현
	 .init, destroy, doFilter

3. 필터 등록
	web.xml 등록
	@WebFilter
	
	 
실습 : 요청 URI 통계 필터
	request.getRequestURI()
	key - uri, 값은 - 요청횟수
	Map<String, Integer> map;
		/login.jsp, 5
		/pagingUser, 15
		
	요청 통계자료를 담은 map 객체를 다른 servlet, jsp에서도 활용하려면???  applicationScope에 저장