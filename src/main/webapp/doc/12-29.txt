factorial
제귀함수(메소드) : 자기 자신을 호출하는 함수(메소드)

일반적으로 factorial.java 에서 한거처럼 안함

	<!-- https://mvnrepository.com/artifact/junit/junit -->
	<dependency>
	    <groupId>junit</groupId>
	    <artifactId>junit</artifactId>
	    <version>4.13.1</version>
	    <scope>test</scope>
	</dependency>

테스트까지만 쓰기 때문에 배포가 안됨
hamcrest 는 jre에서 써서 같이 설치된?


scr/test/java사용하기
명명규칙		 ~~Test

gwt 사용했음

서블릿을 테스트하는것은 어렵다.

구체화 <->추상화(일반화)
tomcat       servlet comfailer   new 로 만드는것은 서블릿 컨테이너 안에있다.
resin 
.
.
.

서블린은 우리가 직접 호출하지않고
서버가 서블릿이 매핑된걸 확인해서 서블릿의 서비스 메소드를 호출함

서버가 res req를 만들어주는데..

new로 우리가 만들려면 ..

외부환경에서 구현되는것은 테스트코드 활용이 힘듬
그래서 주로 계산기같은것에 많이씀.

cd /D/A_TeachingMaterial/6.JspSpring/workspace/jsp

ls로 확인
mvn clean 으로 지우고
mvn pakege로 실행(하면서 생성)

실패시 faild뜸

war파일 안만들어 진다던데

사진찍기


maven package 시 test 코드 실행 스킵
$ mvn package -Dmaven.test.skip=true

HttpServletRequest : 사용자가 요청을 보낼때의 정보(파라미터, 헤더, 쿠키...)를 은닉화한 객체
		누가생성? = servlet-container에서 생성
		servlet-container에서 생성하여 service 메소드를 호출할 때 사용되는 인자 service(doXXX)

주로 사용되는 용도
	1.파라미터의 정보 확인
		-인위 조작이 불가
		getParameter는 존재하지만 setParameter 메소드는 없음
		==>request 클래스의 Wrapper 클래스를 이용하여 파라미터 조작 가능

	2.헤더 정보 확인

	3.속성(attribute) 정보, 설정, 조회
		-개발자가 인위 조작 가능
		getAttribute, setAttribute 메소드 존재

	4.contextPath 확인
	서블릿 + 컨텐츠(js, css, image 등) 들의 집합

	webApplication = (유사) contextPath
	request.getContextPath()를 통해 contextPath 문자열을 얻어올 수 있다.

	서버 하나에 여러개의 웹어플리케이션을 서비스 하는것이 가능
	==>uri 요청시 어떤 웹 어플리케이션을 의미하는지 구분 필요

	http://도메인/CONTEXT_PATH/경로

	==>css,javascript,image 파일의 경로를 설정 할때 사용
	jsp라는 이름으로 contextPath가 설정된 웹어플리케이션의 경우

	  webapp/image/brown.png 파일의 경로를 다음과 같이 설정할 수 있다.
	<img src="/jsp/image/borwn.png"/>	

	<%=request.getContextPath()%>활용...
	=>jsp 라는 이름의 컨텍스트 패스를 수정할 경우 링크와 관련된 부분을 모두 수정해야하는 문제점이 발생
	request.getContextPath()메소드를 통해 유지 보수 문제 해결 가능
	<img src="<%=request.getContextPath()%>/image/brown.png"/>

whapp/jsp/request.jsp

jsp파일 내용 : request 객체에서 제공하는 메소드와 메소드의 리턴값을 확인

<body>
	request.getContentType(): 리턴값을 출력 <br>
	request.getMethod() 리턴값을 출력<br>
	request.getConTestPath():리턴값을 출력<br>
	request.getServerPort() : 리턴값을 출력<br>
</body>

